// Helper for responsive content
@mixin xs {
    @media screen and ( max-width: map-get( $breakpoints, 'mini' ) ) {
        @content;
    }
}

@mixin sm {
    @media screen and ( max-width: map-get( $breakpoints, 'small' ) ) {
        @content;
    }
}

@mixin md {
    @media screen and ( max-width: map-get( $breakpoints, 'medium' ) ) {
        @content;
    }
}

@mixin lg {
    @media screen and ( max-width: map-get( $breakpoints, 'large' ) ) {
        @content;
    }
}

@mixin xl {
    @media screen and ( max-width: map-get( $breakpoints, 'huge' ) ) {
        @content;
    }
}

@mixin xxl {
    @media screen and ( min-width: map-get( $breakpoints, 'giant' ) ) {
        @content;
    }
}

@mixin rwd( $screen_width, $type:max ) {
    @media screen and ( #{$type}-width: $screen_width ) {
        @content;
    }
}

@mixin reduce-motion() {
   @media screen and (prefers-reduced-motion: reduce) {
        @content;
    }
}

@function gutter( $size:null ) {
    @if map-has-key($gutters, $size) {
        @return map-get( $gutters, $size );
    }

    @return $gutter;
}

// Helper to import font
@mixin font($name, $file, $weight:normal, $style:normal) {
    @font-face {
        font-family: $name;
        src: url(#{ $path-fonts + $file }.woff2) format('woff2'),
             url(#{ $path-fonts + $file }.woff) format('woff');
        font-weight: $weight;
        font-style: $style;
    }
}

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $rem: ();

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $rem: append($rem, $value);
    }

    @else if type-of($value) == number {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $rem: append($rem, ($val / 16 + rem));
      }

      @else if $unit == "%" {
        $rem: append($rem, $value);
      }

      @else {
        $rem: append($rem, $value);
      }
    }

    @else {
      $rem: append($rem, $value);
    }
  }

  #{$property}: $rem;
}

@function rem($value) {
  @return parseInt($value) / 16 + rem;
}

@mixin max-size($max-width:none, $max-height:none) {
    @if $max-width != none {
        @include rem(max-width, $max-width);
    }

    @if $max-height != none {
        @include rem(max-height, $max-height);
    }
}

@mixin min-size($min-width:none, $min-height:none) {
    @if $min-width != none {
        @include rem(min-width, $min-width);
    }

    @if $min-height != none {
        @include rem(min-height, $min-height);
    }
}

@mixin fullsize($position:absolute) {
    position : $position;
    top      : 0;
    right    : 0;
    bottom   : 0;
    left     : 0;
}



@mixin size($width:auto, $height:auto) {
    @if $width != auto {
        @include rem(width, $width);
    }

    @if $height != auto {
        @include rem(height, $height);
    }
}

@function _url( $url ) {
    @return url( $path-images + $url );
}

@mixin clearfix() {
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both
  }
}
